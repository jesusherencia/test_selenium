package org.example;
// Generated by Selenium IDE

import org.junit.jupiter.api.parallel.Execution;
import org.junit.jupiter.api.parallel.ExecutionMode;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import org.openqa.selenium.*;

import org.junit.jupiter.api.*;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.edge.EdgeOptions;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.remote.AbstractDriverOptions;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;

import java.io.Closeable;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.*;

@Execution(ExecutionMode.CONCURRENT)
//@RunWith(Parameterized.class)
public class TestGoogleTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;

  //String browserName;

  /*public TestGoogleTest(String browserName) {
    this.browserName = browserName;
  }*/

  /*@Parameterized.Parameters
  public static Collection<Object[]> primeNumbers() {
    return Arrays.asList(new Object[][] {
            { "chrome" },
            { "firefox" }
    });
  }*/

  @BeforeEach
  public void setUp() {
    //this.driver = createRemoteDriver("firefox");
    //this.driver = createLocalDriver("firefox");

    //js = (JavascriptExecutor) driver;
    //vars = new HashMap<String, Object>();
  }

  private RemoteWebDriver createRemoteDriver(String browserName) {
    try {
      DesiredCapabilities dc = getDesiredCapabilities(Platform.LINUX, browserName);
      RemoteWebDriver driver = new RemoteWebDriver(new URL("http://127.0.0.1:4444"), dc);
      return driver;
    } catch (MalformedURLException e) {
      throw new RuntimeException(e);
    }
  }

  private WebDriver createLocalDriver(String browserName) {
    WebDriver driver = null;
    switch (browserName) {
      case "firefox": {
        FirefoxOptions options = new FirefoxOptions();
        setArgumentsInOptions(options, "firefox");
        driver = new FirefoxDriver(options);
        break;
      }
      case "chrome": {
        ChromeOptions options = new ChromeOptions();
        setArgumentsInOptions(options, "chrome");
        driver = new ChromeDriver(options);
        break;
      }
      case "edge": {
        EdgeOptions options = new EdgeOptions();
        options.addArguments("--no-sandbox");
        String userDataDir = "--user-data-dir=" + System.getProperty("java.io.tmpdir") + "temp_profile";
        System.out.println(userDataDir);
        options.addArguments(userDataDir);
        setArgumentsInOptions(options, "edge");
        driver = new EdgeDriver(options);
        break;
      }
    }
    return driver;
  }

  private static void setArgumentsInOptions(AbstractDriverOptions options, String browserName) {
    String os = System.getProperty("os.name").toLowerCase();
    boolean unixOS = os.contains("nux");
    if (unixOS) {
      // setting headless mode to true.. so there isn't any ui
      List<String> arguments = List.of("--headless", "--no-sandbox");
      switch (browserName) {
        case "firefox": {
          FirefoxOptions firefoxOptions = (FirefoxOptions) options;
          firefoxOptions.addArguments(arguments);
          break;
        }
        case "chrome": {
          ChromeOptions chromeOptions = (ChromeOptions) options;
          chromeOptions.addArguments(arguments);
          break;
        }
        default:
          break;
      }
      //options.addArguments("--no-sandbox");
    }
  }

  private static DesiredCapabilities getDesiredCapabilities(Platform platform, String browserName) {
    DesiredCapabilities dc = new DesiredCapabilities();
    dc.setPlatform(platform);
    dc.setBrowserName(browserName);
    return dc;
  }

  @AfterEach
  public void tearDown() {
    //driver.quit();
  }

  //@Test
  @ParameterizedTest
  @ValueSource(strings = { "firefox", "chrome" })
  public void testDuckDuckGo(String browserName) {
    WebDriver driver = createRemoteDriver(browserName);
    driver.get("https://duckduckgo.com/");
    driver.manage().window().maximize();
    driver.findElement(By.id("searchbox_input")).click();
    driver.findElement(By.id("searchbox_input")).sendKeys("abc");
    driver.findElement(By.cssSelector("button.iconButton_button__A_Uiu:nth-child(2)")).click();
    driver.quit();
  }

  //@Test
  @ParameterizedTest
  @ValueSource(strings = { "firefox", "chrome", "MicrosoftEdge" })
  public void testAbebooks(String browserName) throws IOException {
    try (var crd = new CloseableWebDriver(createRemoteDriver(browserName))) {
      WebDriver driver = crd.getDriver();
      //WebDriver driver = createRemoteDriver(browserName);
      driver.get("https://www.abebooks.fr/");
      driver.manage().window().maximize();
      driver.findElement(By.id("header-searchbox-input")).click();
      driver.findElement(By.id("header-searchbox-input")).sendKeys("abc");
      driver.findElement(By.id("header-searchbox-button")).click();
      //driver.quit();
    }
  }
}

class CloseableWebDriver implements Closeable {
  private final WebDriver driver;

  public CloseableWebDriver(WebDriver driver) {
    this.driver = driver;
  }

  public WebDriver getDriver() {
    return this.driver;
  }

  @Override
  public void close() throws IOException {
    this.driver.quit();
  }
}
